// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                          String  @id @default(auto()) @map("_id") @db.ObjectId
  type                        String
  provider                    String
  providerAccountId           String
  token_type                  String?
  refresh_token               String? @db.String
  refresh_token_expires_in    Int?
  access_token                String? @db.String
  id_token                    String? @db.String
  scope                       String?
  session_state               String?
  expires_at                  Int?
  user                        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String @db.ObjectId @unique

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId @unique
  sessionToken String   @unique
  expires      DateTime

  @@map("session")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  hashedPassword String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  account        Account[]
  events         Event?
  session       Session[]
  @@map("user")
}

model Event {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String    @unique
  body     String?
  tags     String[]
  startsAt DateTime
  endsAt   DateTime
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId @unique
  comments Comment[]

  @@map("event")
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification-token")
}


type Comment {
  body      String
  createdAt DateTime
}
